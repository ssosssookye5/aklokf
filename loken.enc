import os
try:import requests, pycryptodome, MedoSigner, SignerPy, user_agent
except:os.system("pip install requests pycryptodome MedoSigner SignerPy user_agent") 
import binascii, time, random, os,hashlib,requests, string, user_agent, datetime
from MedoSigner import Argus, Gorgon, md5, Ladon
from urllib.parse import urlencode
import SignerPy
class TempEmail:
    def __init__(self) -> None:
        self.session = requests.Session()
        self.session.headers={"Content-Type": "application/json",'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36', }
        self.base_url = "https://api.mail.tm"
    def get_domains(self) -> list:
        return [item["domain"]
            for item in self.session.get(f"{self.base_url}/domains").json()["hydra:member"]]
    def get_mail(self,password: str = None,domain: str = None,) -> str:
        mail: str = f"{''.join(random.choice(string.ascii_lowercase) for _ in range(16))}@{domain if domain is not None else self.get_domains()[0]}"
        response: int = self.session.post(f"{self.base_url}/accounts", json={"address": mail, "password": mail}).status_code
        try:
            if response == 201:
                token = self.session.post(f"{self.base_url}/token",json={"address": mail,"password": mail if password is None else password,},).json()["token"]
                self.session.headers["Authorization"] = f"Bearer {token}"
                return mail
        except Exception:
            return "Email creation error."
    def fetch_inbox(self):
        return self.session.get(f"{self.base_url}/messages").json()["hydra:member"]
    def get_message(self, message_id: str):
        return self.session.get(f"{self.base_url}/messages/{message_id}").json()
    def get_message_content(self, message_id: str):
        return self.get_message(message_id)["text"]
iid= str(random.randint(1, 10**19))
did= str(random.randint(1, 10**19))
def sign(params, payload: str = None, sec_device_id: str = "", cookie: str or None = None, aid: int = 1233,
         license_id: int = 1611921764, sdk_version_str: str = "2.3.1.i18n", sdk_version: int = 2, 
         platform: int = 19, unix: int = None):
    x_ss_stub = md5(payload.encode('utf-8')).hexdigest() if payload is not None else None
    if not unix: 
        unix = int(time.time())
    return Gorgon(params, unix, payload, cookie).get_value() | {"x-ladon": Ladon.encrypt(unix, license_id, aid),"x-argus": Argus.get_sign(params, x_ss_stub, unix,platform=platform,aid=aid,license_id=license_id,sec_device_id=sec_device_id,sdk_version=sdk_version_str,sdk_version_int=sdk_version)}
def xor(string: str) -> str:
    return "".join([hex(ord(_) ^ 5)[2:] for _ in string])

def handle_first_response(session, params, headers, max_retries=5):
    import secrets
    secret = secrets.token_hex(16)
    session.cookies.update({
        "passport_csrf_token": secret,
        "passport_csrf_token_default": secret
    })
    headers.update({
        'User-Agent': "com.zhiliaoapp.musically/2023906030 (Linux; U; Android 11; ar; Unknown; Build/Unknown; Cronet/TTNetVersion:Unknown 2025-04-03 QuicVersion:Unknown 2025-04-03)",
        'x-tt-passport-csrf-token': secret,
        'Accept': "application/json, text/plain, */*",
        'content-type': "application/x-www-form-urlencoded"
    })
    params.update({
        'app_version': "39.6.3",
        'version_code': "390603",
        'version_name': "39.6.3",
        'manifest_version_code': "2023906030",
        'update_version_code': "2023906030",
        'build_number': "39.6.3",
        'ts': str(int(time.time())),
    })
    params["account_param"] = xor(params["account_param"])
    signature = SignerPy.sign(params=params, cookie=session.cookies)
    headers.update({
        'x-ss-req-ticket': signature['x-ss-req-ticket'],
        'x-ss-stub': signature['x-ss-stub'],
        'x-argus': signature["x-argus"],
        'x-gorgon': signature["x-gorgon"],
        'x-khronos': signature["x-khronos"],
        'x-ladon': signature["x-ladon"],
    })
    proxies = {
        "http": "http://ssosso-zone-resi:747392@f2f639fae50994da.iuy.us.ip2world.vip:6001",
        "https": "http://ssosso-zone-resi:747392@f2f639fae50994da.iuy.us.ip2world.vip:6001"
    }
    url = "https://api16-normal-c-alisg.ttapis.com/passport/account_lookup/email/"
    response = session.post(url, params=params, headers=headers, proxies=proxies)
    try:
        return response.text.split('"passport_ticket":"')[1].split('"')[0]
    except:
        return 'h'
def get_default_params():
    return {"request_tag_from": "h5","fixed_mix_mode": "1","mix_mode": "1","scene": "1","device_platform": "android","os": "android","ssmix": "a",'_rticket': str(round(random.uniform(1.2, 1.6) * 100000000) * -1) + "4632",'cdid': str(__import__("uuid").uuid4()),"channel": "googleplay","aid": "1233","app_name": "musical_ly","version_code": "360505","version_name": "36.5.5","manifest_version_code": "2023605050","update_version_code": "2023605050","ab_version": "36.5.5","resolution": "1440*2969","dpi": "532","device_type": "SM-S928B","device_brand": "samsung","language": "EN","os_api": "34","os_version": "14","ac": "wifi","is_pad": "0","current_region": "US","app_type": "normal","sys_region": "US","last_install_time": "1729289943","mcc_mnc": "41820","timezone_name": "Asia/Baghdad","carrier_region_v2": "418","residence": "US","app_language": "en","carrier_region": "US","timezone_offset": "10800","host_abi": "arm64-v8a","locale": "ar","ac2": "wifi","uoo": "0","op_region": "US","build_number": "36.5.5","region": "US",'ts': str(round(random.uniform(1.2, 1.6) * 100000000) * -1),'iid': iid,'device_id': did,'openudid': str(__import__("binascii").hexlify(os.urandom(8)).decode()),"support_webview": "1","cronet_version": "1c651b66_2024-08-30","ttnet_version": "4.2.195.8-tiktok","use_store_region_cookie": "1"}
def check_email_bot(email):
    session = requests.Session()
    try:
        secret = __import__("secrets").token_hex(16)
        session.cookies.update({"passport_csrf_token": secret,"passport_csrf_token_default": secret})
        headers = {'User-Agent': "com.zhiliaoapp.musically/2023605050 (Linux; U; Android 14; ar; SM-S928B; Build/UP1A.231005.007; Cronet/TTNetVersion:1c651b66 2024-08-30 QuicVersion:182d68c8 2024-05-28)",'Accept': "application/json, text/plain, */*",'x-tt-passport-csrf-token': secret,'content-type': "application/x-www-form-urlencoded",}
        params = get_default_params()
        params["account_param"] = email
        passport_ticket = handle_first_response(session, params, headers)
        print(passport_ticket)
        if not passport_ticket:
            return 'h'
        __email_client = TempEmail()
        __email = __email_client.get_mail()
        second_url = f"https://api22-normal-c-alisg.tiktokv.com/passport/email/send_code"
        params["email"] = __email
        params["not_login_ticket"] = passport_ticket
        params["type"] = "3737"
        params["mix_mode"] = "1"
        params.pop("fixed_mix_mode", None)
        params.pop("account_param", None)
        m = sign(params=urlencode(params), payload="", cookie="")
        headers.update({'x-argus': m["x-argus"],'x-gorgon': m["x-gorgon"],'x-khronos': m["x-khronos"],'x-ladon': m["x-ladon"],})
        proxies = {"http": "http://ssosso-zone-resi:747392@f2f639fae50994da.iuy.us.ip2world.vip:6001","https": "http://ssosso-zone-resi:747392@f2f639fae50994da.iuy.us.ip2world.vip:6001"}
        _ = session.post(second_url, params=params, headers=headers, proxies=proxies)
        veri_code = None
        while True:
            time.sleep(1)
            for mail in __email_client.fetch_inbox():
                veri_code = str(__email_client.get_message_content(mail["id"])).split('This email was generated for ')[1].split('.\nPrivacy Policy')[0]
                if veri_code:
                    break
            if veri_code:
                break
        return veri_code
    except Exception as e:
        return 'badboyhh'
        
        
        
        
